#!/usr/bin/env bash

set -euo pipefail

command=${1:-}
args=${@:2}

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
	HARPOON_ROOT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$( readlink "$SOURCE" )"
	[[ ${SOURCE} != /* ]] && SOURCE="$HARPOON_ROOT/$SOURCE"
done
export HARPOON_ROOT="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

export MODULES_ROOT=${HARPOON_ROOT}/modules
export SERVICES_ROOT=${HARPOON_ROOT}/services
export VENDOR_ROOT=${HARPOON_ROOT}/vendor


if [[ "$command" == "initpath" ]]; then
	echo "${HARPOON_ROOT}/completion/init.sh" && exit 0
fi


# functions
for f in $(ls ${HARPOON_ROOT}/core/func); do
	source ${HARPOON_ROOT}/core/func/${f}
done


# variables
for f in $(ls ${HARPOON_ROOT}/core/vars); do
	source ${HARPOON_ROOT}/core/vars/${f}
done

source ${HARPOON_ROOT}/core/parse_cmd.sh

MODULE_NAME=$(parse_cmd ${command})

if [[ -v USE_DIND && "$MODULE_NAME" != "dind" ]]; then
	print_info "Harpoon is running in dind mode"
	${DIND_EXEC_TTY} harpoon "$@"
	exit $?
fi

# this should always be loaded AFTER core vars and func
source ${HARPOON_ROOT}/core/boot.sh

source ${MODULES_ROOT}/modules.sh

source ${SERVICES_ROOT}/services.sh

# setup temp directory
mkdir -p ${HARPOON_TEMP}

case "${command:-}" in
	compose) ## <arg>... %% üê≥  Run docker-compose for the Harpoon core services
		${HARPOON_DOCKER_COMPOSE} ${args} ;;

	cmplt)
		source ${HARPOON_ROOT}/completion/completion.sh ;;

	config-dns)
		config_dns ;;

	config-docker)
		config_docker ;;

	config-docker-network)
		config_docker_network ;;

	env) ## %% Show environment variables
		if [ -v PAGER ]; then
			env | sort | ${PAGER}
		else
			env | sort
		fi
		;;

	help) ## [<module> | <service>] %% ‚ÅâÔ∏è  Get help
		if [[ "$args" == "" ]]; then all_help; fi

		# try modules
		module_exists ${args}

		if [ -v MODULE_ROOT ]; then
			module_help
		else
			# try services
			service_exists ${args}

			if [ -v SERVICE_ROOT ]; then
				service_help ${args};
			elif [ -f ./tasks.sh ]; then
				# try custom task/command handler in working directory
				tasks_help
			fi
		fi
		;;

	show-nameserver-ip)
		echo ${NAMESERVER_IP} ;;

	up|install) ## %% üèÅ  Install Harpoon and start core services
		up ;;

	down|uninstall) ## [<all>] %% üîΩ  Stop and remove Harpoon core, and optionally, supporting services
		down ${args} ;;

	reset) ## %% üåØ  Stop, remove, and restart Harpoon core services
		down
		up
		;;

	self-update|selfupdate) ## %% üí´  Update Harpoon and plugins
		self_update ;;

	clean) ## [<all>] %% üõÄ  Completely uninstall Harpoon core, and optionally, all supporting services
		clean ${args} ;;

	status) ## %% üö•  Display the status of Harpoon core services
		DOWN_HOSTS=0
		for i in dnsmasq consul traefik; do
			IS_UP=$(${HARPOON_DOCKER_COMPOSE} ps ${i} | grep 'Up') || true
			if [[ ${IS_UP} ]]; then
				printf "%-20s%s\n" "${i}" "${UP}"
			else
				printf "%-20s%s\n" "${i}" "${DOWN}"
				DOWN_HOSTS+=1
			fi
		done
		if [ ${DOWN_HOSTS} -gt 0 ]; then
			exit 1
		fi
		;;

	modules:list) ## %% üëì  List modules available in Harpoon
		modules ;;

	services:list) ## %% üëì  List services available in Harpoon
		services ;;

	services:status) ## %% üö¶  Display the status for all supporting services
		services_status ;;

	stfu) ## %% ü§ê  Please stop talking
		export HARPOON_SPEECH=false;;

	radio)
		say -v Fred -r 190 "Fitter. Happier. More productive." ;;

	*)
		if [ "${MODULE_NAME}" == "" ]; then all_help; fi

		# try modules
		module_exists ${MODULE_NAME}

		if [ -v MODULE_ROOT ]; then
			source ${MODULE_ROOT}/handler.sh
		else
			# try services
			service_exists ${MODULE_NAME}

			if [ -v SERVICE_ROOT ]; then
				handle_service ${MODULE_NAME} ${command};
			elif [ -v ROOT_TASKS_FILE ]; then
				# try custom task/command handler in working directory
				command=${command#${PROJECT_TASK_PREFIX}:}
				source ${ROOT_TASKS_FILE}
			fi
		fi
esac
